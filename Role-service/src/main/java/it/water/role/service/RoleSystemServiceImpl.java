package it.water.role.service;

import java.util.Collection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import it.water.core.api.model.Role;
import it.water.core.api.registry.filter.ComponentFilterBuilder;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.repository.service.BaseEntitySystemServiceImpl;
import it.water.role.api.RoleRepository;
import it.water.role.api.RoleSystemApi;
import it.water.role.api.UserRoleRepository;
import it.water.role.model.WaterRole;
import it.water.role.model.WaterUserRole;
import lombok.Getter;
import lombok.Setter;


/**
 * @Generated by Water Generator
 * System Service Api Class for Role entity.
 */
@FrameworkComponent
public class RoleSystemServiceImpl extends BaseEntitySystemServiceImpl<WaterRole> implements RoleSystemApi {
    private static Logger logger = LoggerFactory.getLogger(RoleSystemServiceImpl.class);
    @Inject
    @Getter
    @Setter
    private RoleRepository repository;

    @Inject
    @Getter
    @Setter
    private UserRoleRepository userRoleRepository;

    @Inject
    @Setter
    private ComponentFilterBuilder componentFilterBuilder;

    public RoleSystemServiceImpl() {
        super(WaterRole.class);
    }

    @Override
    public Collection<Role> findUserRoles(long userId) {
         return userRoleRepository.findUserRoles(userId);
    }

    @Override
    public void addUserRole(long userId, Role role) {
        if (role == null)
            return;
        logger.debug("Adding role {} to user {}", role.getName(), userId);
        WaterUserRole waterUserRoles = new WaterUserRole((WaterRole) role, userId);
        userRoleRepository.persist(waterUserRoles);
    }

    @Override
    public void removeUserRole(long userId, Role role) {
        if (role == null)
            return;
        logger.debug("removing role {} from user {}", role.getName(), userId);
        userRoleRepository.removeUserRole(userId, role.getId());
    }
}