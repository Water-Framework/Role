
package it.water.role.service.rest;

import it.water.core.api.service.BaseEntityApi;
import it.water.core.api.service.rest.FrameworkRestController;
import it.water.core.interceptors.annotations.Inject;
import it.water.role.api.RoleApi;
import it.water.role.api.rest.RoleRestApi;
import it.water.role.model.WaterRole;
import it.water.service.rest.persistence.BaseEntityRestApi;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * @Generated by Water Generator
 * Rest Api Class for Role entity.
 */
@FrameworkRestController(referredRestApi = RoleRestApi.class)
public class RoleRestControllerImpl extends BaseEntityRestApi<WaterRole> implements RoleRestApi {
    @SuppressWarnings("unused")
    private static Logger log = LoggerFactory.getLogger(RoleRestControllerImpl.class.getName());

    @Inject
    @Setter
    private RoleApi roleApi;

    @Override
    protected BaseEntityApi<WaterRole> getEntityService() {
        return roleApi;
    }

    @Override
    public void assignRole(long userId, long roleId) {
        WaterRole r = roleApi.find(roleId);
        roleApi.addUserRole(userId, r);
    }

    @Override
    public void unassignRole(long userId, long roleId) {
        WaterRole r = roleApi.find(roleId);
        roleApi.removeUserRole(userId,r);
    }
}
